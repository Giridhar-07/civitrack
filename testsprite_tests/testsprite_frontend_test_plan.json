[
  {
    "id": "TC001",
    "title": "User Registration with Valid Data",
    "description": "Verify that a new user can successfully register with valid information, resulting in hashed password storage and correct user creation.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to registration page"
      },
      {
        "type": "action",
        "description": "Input valid username, email, and password fields"
      },
      {
        "type": "action",
        "description": "Submit registration form"
      },
      {
        "type": "assertion",
        "description": "Confirm registration success response"
      },
      {
        "type": "assertion",
        "description": "Verify password stored in backend is hashed, not plaintext"
      }
    ]
  },
  {
    "id": "TC002",
    "title": "User Registration with Invalid Data",
    "description": "Attempt to register with invalid or missing fields and verify appropriate validation errors are returned.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to registration page"
      },
      {
        "type": "action",
        "description": "Input invalid email format and a short password"
      },
      {
        "type": "action",
        "description": "Submit registration form"
      },
      {
        "type": "assertion",
        "description": "Verify that registration fails with descriptive validation error messages"
      }
    ]
  },
  {
    "id": "TC003",
    "title": "User Login with Correct Credentials",
    "description": "Ensure a user can login with valid credentials resulting in JWT token issuance and session start.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to login page"
      },
      {
        "type": "action",
        "description": "Enter valid username/email and password"
      },
      {
        "type": "action",
        "description": "Click login button"
      },
      {
        "type": "assertion",
        "description": "Confirm login success and receipt of valid JWT token"
      }
    ]
  },
  {
    "id": "TC004",
    "title": "User Login with Incorrect Credentials",
    "description": "Verify that login fails when wrong username or password is provided, with correct error codes.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to login page"
      },
      {
        "type": "action",
        "description": "Enter invalid username/email or password"
      },
      {
        "type": "action",
        "description": "Click login button"
      },
      {
        "type": "assertion",
        "description": "Check that login is denied with HTTP 401 Unauthorized response"
      }
    ]
  },
  {
    "id": "TC005",
    "title": "Password Change for Authenticated User",
    "description": "Verify that an authenticated user can successfully change their password and login with new password thereafter.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Login with existing credentials"
      },
      {
        "type": "action",
        "description": "Navigate to password change interface"
      },
      {
        "type": "action",
        "description": "Submit old password and new valid password"
      },
      {
        "type": "assertion",
        "description": "Confirm password change success message"
      },
      {
        "type": "action",
        "description": "Logout and login again using new password"
      },
      {
        "type": "assertion",
        "description": "Verify login is successful with new password"
      }
    ]
  },
  {
    "id": "TC006",
    "title": "Issue Reporting with Valid Inputs Including Photos and Location",
    "description": "Check that authenticated user can create an issue with category, geospatial location, description, and photo evidence successfully saved in the system.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Login as authenticated user"
      },
      {
        "type": "action",
        "description": "Navigate to issue reporting page"
      },
      {
        "type": "action",
        "description": "Fill in category, title, description, select location on map, and upload one or more photos"
      },
      {
        "type": "action",
        "description": "Submit issue report form"
      },
      {
        "type": "assertion",
        "description": "Verify issue is persisted with correct geospatial data and photos stored"
      }
    ]
  },
  {
    "id": "TC007",
    "title": "Issue Reporting with Missing or Invalid Data",
    "description": "Attempt to report an issue with missing category, invalid location coordinates, or no photos, and verify form validation rejects the submission.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Login as authenticated user"
      },
      {
        "type": "action",
        "description": "Navigate to issue reporting page"
      },
      {
        "type": "action",
        "description": "Submit the form with missing category, invalid location, or no photos"
      },
      {
        "type": "assertion",
        "description": "Verify error messages prevent submission, highlighting validation errors"
      }
    ]
  },
  {
    "id": "TC008",
    "title": "Interactive Map Loading and Filtering Issues",
    "description": "Validate that the map page loads paginated issues based on user location, allowing filtering by category and status with correct dynamic updates.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to issue discovery map page"
      },
      {
        "type": "action",
        "description": "Apply filters for issue category and status"
      },
      {
        "type": "action",
        "description": "Scroll the map interface to trigger infinite scroll data load"
      },
      {
        "type": "assertion",
        "description": "Verify map shows filtered issue markers corresponding to filters and pagination"
      },
      {
        "type": "assertion",
        "description": "Ensure no duplicate or missing issues appear across pages"
      }
    ]
  },
  {
    "id": "TC009",
    "title": "Nearby Issue Queries with Spatial Indexing Performance",
    "description": "Confirm backend uses spatial indexes to return nearby issues efficiently when queried with geospatial coordinates and filters applied.",
    "category": "performance",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Send API request querying issues within defined radius of a location with filters"
      },
      {
        "type": "assertion",
        "description": "Verify response times meet performance thresholds and results use spatial data correctly"
      },
      {
        "type": "assertion",
        "description": "Check returned issues are only those within specified geospatial boundaries"
      }
    ]
  },
  {
    "id": "TC010",
    "title": "WebSocket Real-Time Updates for Subscribed Area",
    "description": "Test that after subscribing to a location-based WebSocket room, the user receives push notifications for new or updated issues in that area only.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Open client and establish WebSocket connection with authentication"
      },
      {
        "type": "action",
        "description": "Subscribe to nearby issues for a specific geolocation"
      },
      {
        "type": "action",
        "description": "Trigger creation or update of an issue within subscribed area from another client"
      },
      {
        "type": "assertion",
        "description": "Confirm real-time notification is received on subscribed client"
      },
      {
        "type": "action",
        "description": "Create issue outside subscribed area"
      },
      {
        "type": "assertion",
        "description": "Verify client does not receive notifications irrelevant to subscribed area"
      }
    ]
  },
  {
    "id": "TC011",
    "title": "Redis Caching of Nearby Issues and Cache Invalidation",
    "description": "Ensure Redis caches query results for nearby issues with TTL and cache invalidates correctly on data changes, maintaining data consistency.",
    "category": "performance",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Perform a nearby issues query to populate Redis cache"
      },
      {
        "type": "assertion",
        "description": "Verify subsequent identical queries use cached data with faster response"
      },
      {
        "type": "action",
        "description": "Create or update issue relevant to previous cached query"
      },
      {
        "type": "assertion",
        "description": "Check that Redis cache invalidates or updates to reflect recent data"
      }
    ]
  },
  {
    "id": "TC012",
    "title": "Redis Service Degradation Handling",
    "description": "Simulate Redis service outages and confirm system logs the event, applies fallback to direct database queries, and UI gracefully informs user without breaking.",
    "category": "error handling",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Simulate Redis service downtime during a nearby issues query"
      },
      {
        "type": "assertion",
        "description": "Confirm fallback to database-driven queries occurs without errors"
      },
      {
        "type": "assertion",
        "description": "Verify error event is logged in system"
      },
      {
        "type": "assertion",
        "description": "Check client UI displays a non-disruptive notice of degraded functionality"
      }
    ]
  },
  {
    "id": "TC013",
    "title": "AI Chatbot Query and Topic-based Quick Help",
    "description": "Validate user interactions with the floating chatbot UI trigger calls to Google Gemini AI and display contextually relevant AI-generated responses or quick-help content.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Open chatbot interface"
      },
      {
        "type": "action",
        "description": "Submit a natural language query or select a quick-help topic"
      },
      {
        "type": "assertion",
        "description": "Verify request is sent to the AI service endpoint"
      },
      {
        "type": "assertion",
        "description": "Check that chatbot displays coherent and helpful AI-generated response"
      }
    ]
  },
  {
    "id": "TC014",
    "title": "AI Service Failure Graceful Fallback",
    "description": "Simulate failures in the AI service and verify fallback logic routes to supported alternative models and UI gracefully handles errors without crashes.",
    "category": "error handling",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Cause AI service endpoint to fail or return errors"
      },
      {
        "type": "action",
        "description": "Attempt chatbot queries"
      },
      {
        "type": "assertion",
        "description": "Verify system retries with fallback AI model"
      },
      {
        "type": "assertion",
        "description": "Ensure chatbot UI displays an error message without breaking"
      }
    ]
  },
  {
    "id": "TC015",
    "title": "Admin User Management: Viewing, Editing, and Deleting Users",
    "description": "Ensure admin users can list users with filters, successfully edit user profiles including role changes, and delete users with audit logs recorded and UI feedback.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Login as admin"
      },
      {
        "type": "action",
        "description": "Navigate to user management dashboard"
      },
      {
        "type": "action",
        "description": "Filter users by role or status"
      },
      {
        "type": "assertion",
        "description": "Verify filtered user list is correctly displayed"
      },
      {
        "type": "action",
        "description": "Select a user and edit profile fields including role"
      },
      {
        "type": "action",
        "description": "Save changes"
      },
      {
        "type": "assertion",
        "description": "Confirm success notification and audit log entry created"
      },
      {
        "type": "action",
        "description": "Delete a user from the list"
      },
      {
        "type": "assertion",
        "description": "Verify user is removed and deletion is logged with feedback displayed"
      }
    ]
  },
  {
    "id": "TC016",
    "title": "Issue Status Change Requests and Audit Trail",
    "description": "Validate that users or admins can submit status change requests for issues which then undergo approval or rejection, with notifications sent and audit logs maintained.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Submit a status change request for an issue as a user"
      },
      {
        "type": "assertion",
        "description": "Verify request is recorded and pending notification is sent to admins"
      },
      {
        "type": "action",
        "description": "Admin reviews the status change request and approves it"
      },
      {
        "type": "assertion",
        "description": "Confirm issue status updates accordingly and notifications are sent to requester"
      },
      {
        "type": "assertion",
        "description": "Check an audit trail record for the status change is created"
      },
      {
        "type": "action",
        "description": "Admin rejects a different status change request"
      },
      {
        "type": "assertion",
        "description": "Verify notifications for rejection are sent and audit logs reflect rejection"
      }
    ]
  },
  {
    "id": "TC017",
    "title": "Security: Unauthorized Access Attempts Blocked",
    "description": "Ensure all secure endpoints reject unauthorized requests with proper HTTP status codes and messages.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Attempt to access protected API endpoints without JWT token"
      },
      {
        "type": "assertion",
        "description": "Verify response is HTTP 401 Unauthorized"
      },
      {
        "type": "action",
        "description": "Attempt to access admin-only functions with regular user token"
      },
      {
        "type": "assertion",
        "description": "Verify response is HTTP 403 Forbidden"
      }
    ]
  },
  {
    "id": "TC018",
    "title": "Security: Rate Limiting Enforcement",
    "description": "Verify that the system enforces rate limiting on API requests, blocking excessive calls and returning appropriate headers and error codes.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Generate a high volume of API requests within a short period from same client"
      },
      {
        "type": "assertion",
        "description": "Ensure HTTP 429 Too Many Requests is returned"
      },
      {
        "type": "assertion",
        "description": "Confirm appropriate rate limiting headers are sent in response"
      }
    ]
  },
  {
    "id": "TC019",
    "title": "Security: CORS Policies and CSP Headers",
    "description": "Validate that the backend responds with strict CORS headers allowing only trusted origins, and Content Security Policy headers are correctly set to prevent XSS attacks.",
    "category": "security",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Send cross-origin requests from allowed and disallowed origins"
      },
      {
        "type": "assertion",
        "description": "Verify allowed origins succeed with correct CORS headers"
      },
      {
        "type": "assertion",
        "description": "Disallowed origins get blocked by CORS policy"
      },
      {
        "type": "assertion",
        "description": "Check HTTP response headers include strict CSP definitions"
      }
    ]
  },
  {
    "id": "TC020",
    "title": "API Response Envelope and Consistent Error Handling",
    "description": "Confirm all API endpoints return standardized response envelopes including success or error status, data payload or error message, and consistent HTTP status codes.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Invoke various API endpoints including success and failure scenarios"
      },
      {
        "type": "assertion",
        "description": "Verify responses conform to standardized envelope format"
      },
      {
        "type": "assertion",
        "description": "Check error cases include meaningful messages and appropriate HTTP status codes"
      }
    ]
  },
  {
    "id": "TC021",
    "title": "System Resilience: Backend Circuit Breaker and Retry Logic",
    "description": "Simulate failures in Redis and external APIs and verify circuit breaker triggers, retries occur, and automatic recovery happens maintaining service availability.",
    "category": "error handling",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Trigger Redis downtime or slow response"
      },
      {
        "type": "assertion",
        "description": "Verify circuit breaker trips after failure threshold"
      },
      {
        "type": "assertion",
        "description": "Confirm retry attempts are made with backoff"
      },
      {
        "type": "action",
        "description": "Restore Redis service"
      },
      {
        "type": "assertion",
        "description": "Ensure circuit breaker resets and normal operation resumes"
      }
    ]
  },
  {
    "id": "TC022",
    "title": "Performance: Validation of Spatial Index Benefits",
    "description": "Benchmark querying geospatial issues with and without spatial indexes enabled and verify measurable performance improvements without feature regressions.",
    "category": "performance",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Disable spatial indexes and run representative spatial queries"
      },
      {
        "type": "assertion",
        "description": "Measure higher query latencies"
      },
      {
        "type": "action",
        "description": "Enable spatial indexes and rerun same queries"
      },
      {
        "type": "assertion",
        "description": "Verify reduced latency and correct query results"
      },
      {
        "type": "assertion",
        "description": "Confirm no loss of functionality in issue filtering or location accuracy"
      }
    ]
  }
]
