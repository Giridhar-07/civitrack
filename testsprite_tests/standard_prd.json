{
  "meta": {
    "project": "CiviTrack",
    "date": "2025-08-17",
    "prepared_by": "Software Development Manager"
  },
  "product_overview": "CiviTrack is a civic issue tracking platform designed to empower users to report, discover, and track local civic issues with geospatial context, photo evidence, and real-time updates. The platform features robust authentication, AI-powered assistance, and administrative controls to facilitate efficient civic problem management and community engagement.",
  "core_goals": [
    "Enable users to easily register, authenticate, and manage their profiles securely.",
    "Allow users to report civic issues with location data and photo documentation.",
    "Provide a map-based interface for users to discover and filter reported issues dynamically.",
    "Deliver real-time updates on new and changing issues using WebSocket integration.",
    "Optimize performance and responsiveness via Redis caching and database spatial indexing.",
    "Incorporate AI features such as chatbot assistance and quick-help to enhance user support.",
    "Support administrative functionalities including user management and issue status updates with audit logs.",
    "Ensure system resilience and graceful degradation during partial outages or backend service interruptions.",
    "Maintain strong security measures including JWT authentication, rate limiting, and CORS policies."
  ],
  "key_features": [
    "User Authentication: Full lifecycle support including registration, login, session management, password changes, and admin-level user listing with role management.",
    "Issue Reporting: Users can create issues specifying category, location (with geospatial coordinates), and upload photos as evidence.",
    "Issue Discovery: Interactive infinite-scroll map view with filtering by issue categories and statuses; supports nearby issue querying optimized with PostGIS and spatial indexes.",
    "Real-time Updates: WebSocket implementation for push notifications of new and updated issues, allowing users to subscribe to nearby issues dynamically.",
    "Redis Caching: Multi-tiered caching layer to accelerate data retrieval for nearby issues, issue details, and user-specific data with TTL and invalidation strategies.",
    "AI-Powered Chatbot: Floating chatbot interface connected to a Google Gemini generative AI service providing chat, topic-based quick help, and health monitoring.",
    "Administrative Dashboard: Interfaces for editing and deleting users, managing issue statuses, and reviewing status change requests with audit trail logging.",
    "Robust Backend Resilience: Circuit breaker and retry patterns for Redis and API layers; graceful degradation and automatic recovery to maintain operational availability.",
    "Security Enhancements: JWT token hardening, rate limiting, CSP and secure cookie configurations, and strict CORS policies for a secure production environment."
  ],
  "user_flow_summary": [
    "User Registration and Login: User registers via frontend form, backend creates a hashed password, issues JWT upon successful login, and manages session.",
    "Reporting an Issue: Authenticated user submits an issue with title, category, description, photos, and location; backend persists issue and location with spatial indexing.",
    "Discovering Issues: User accesses map page, which fetches paginated nearby issues with filters applied; infinite scroll triggers further data fetches.",
    "Receiving Real-time Updates: User subscribes to WebSocket room based on location; updates for new or changed issues are pushed and displayed live.",
    "AI Chatbot Interaction: User opens chatbot UI, sends queries or selects help topics; frontend calls AI endpoints and displays AI-generated responses.",
    "Admin User Management: Admin views user list with filters, edits user profiles, or deletes users via administrative panel.",
    "Status Change Requests: User or admin submits a request to change issue status; the request is reviewed, approved, or rejected with notifications and logs recorded.",
    "Handling Service Degradation: When Redis or AI services experience issues, the system logs events, applies fallback logic, and displays graceful UI notices."
  ],
  "validation_criteria": [
    "Authentication workflows must securely hash passwords and generate JWT tokens; unauthorized access is denied with proper HTTP status codes.",
    "Issue creation requires validated input including category, valid geospatial location, and at least one photo upload; invalid data is rejected.",
    "Map-based issue discovery returns results consistent with applied filters and paginated to ensure performance; infinite scroll triggers load more correctly.",
    "WebSocket connections authenticate users and correctly deliver real-time updates only for subscribed areas without data leakage.",
    "Redis caching respects TTL settings, invalidates cache entries on data changes, and system recovers gracefully from Redis outages.",
    "AI service integration enforces the usage of free-tier Gemini models and falls back to supported alternatives on failures, gracefully handling errors.",
    "Admin actions such as user edits or deletions are audited, and UI elements reflect successful or failed operations with feedback.",
    "Security measures including rate limiting and CORS policies prevent abuse and cross-origin attacks; headers and cookies are correctly set.",
    "API endpoints return standardized response envelopes with consistent error handling and status codes as per the defined backend conventions.",
    "Performance optimizations demonstrate measurable improvements with spatial indexes, caching, and batching without regressions in feature functionality."
  ],
  "code_summary": {
    "tech_stack": [
      "TypeScript",
      "React",
      "Node.js",
      "Express",
      "PostgreSQL",
      "Redis"
    ],
    "features": [
      {
        "name": "Authentication",
        "description": "User registration, login, and session management",
        "files": [
          "frontend/src/services/authService.ts",
          "backend/src/controllers/authController.ts",
          "backend/src/routes/authRoutes.ts"
        ]
      },
      {
        "name": "Issue Reporting",
        "description": "Creating issues with location data and photo uploads",
        "files": [
          "frontend/src/services/issueService.ts",
          "backend/src/controllers/issueController.ts",
          "backend/src/routes/issueRoutes.ts"
        ]
      },
      {
        "name": "Issue Discovery",
        "description": "Map-based issue browsing with filtering capabilities",
        "files": [
          "frontend/src/pages/IssueMap.tsx",
          "frontend/src/components/IssueFilter.tsx"
        ]
      },
      {
        "name": "Redis Caching",
        "description": "Caching layer for performance optimization",
        "files": [
          "backend/src/services/redisService.ts",
          "backend/src/config/redis.ts"
        ]
      },
      {
        "name": "Real-time Updates",
        "description": "WebSocket integration for real-time issue updates",
        "files": [
          "frontend/src/services/socketService.ts",
          "backend/src/controllers/socketController.ts"
        ]
      }
    ]
  }
}
